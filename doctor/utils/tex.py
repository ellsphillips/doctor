import os
import string


class TeXDefaults:
  """
  Ensure user has all supporting TeX content to pair with Doctor.
  """

  pkg_cmd = [r"\usepackage", r"\RequirePackage"]

  options = {
    "document": {
      "path": "document/",
      "name": "main"
    },
    "requirements": {
      "packages": {
        "inputenc": ["utf8"],
        "fontenc": ["T1"],
        "textcomp": [],
        "gensymb": [],
        "babel": ["english"],
        "ragged2e": ["document"],
        "float": [],
        "bm": [],
        "amsfonts": [],
        "cancel": [],
        "varwidth": [],
        "blindtext": [],
        "underscore": [],
        "lipsum": [],
        "geometry": ["a4paper,left=2.5cm,right=2.5cm,bottom=3cm,top=4cm"],
        "graphicx": [],
        "caption": [],
        "fp": [],
        "epstopdf": [],
        "framed": [],
        "amsmath": [],
        "textpos": ["absolute"],
        "fancyhdr": [],
        "xkeyval": [],
        "alphalph": [],
        "ifthen": [],
        "appendix": [],
        "titletoc": [],
        "etoolbox": [],
        "emptypage": [],
        "afterpage": [],
        "hyperref": ["verbose"],
        "tcolorbox": [],
        "tikz": [],
        "tkz-euclide": [],
        "pgfplots": [],
        "collcell": [],
        "booktabs": [],
        "longtable": [],
        "multirow": [],
        "multicol": [],
        "colortbl": [],
        "hhline": [],
        "dcolumn": [],
        "tabularx": [],
        "ctable": [],
        "xltabular": [],
        "silence": [],
      },
      "libraries": [
        r"\usepgfplotslibrary{fillbetween}",
        r"\usetikzlibrary{intersections}",
        r"\pgfplotsset{compat=1.12}",
      ]
    },
    "environments": {
      "table": r"""
        \newenvironment{doctor-table}[5]{
          % ---------------------------------------------------------------------------
          % Flexible tabular environment based on pd.DataFrame input. Source code is 
          % beautifully typeset, alternating rows are highlighted and page breaks are 
          % handled automatically
          % 
          % Parameters
          % ----------
          % 
          % #1: Column count
          % #2: Column format
          % #3: Column headers
          % #4: Caption
          % #5: Label
          % 
          % Demo
          % ----
          % 
          % \begin{doctor-table}{4}
          %   {% Column format
          %     >{{\raggedleft\arraybackslash\hsize=\hsize}}X
          %   >{{\raggedleft\arraybackslash\hsize=\hsize}}X
          %     >{{\raggedleft\arraybackslash\hsize=\hsize}}X
          %     >{{\raggedleft\arraybackslash\hsize=\hsize}}X
          %   }{% Column headers
          %     \bfseries Numbers &
          %     \bfseries More numbers &
          %     \bfseries Text &
          %     \bfseries Mash \\
          %   }{% Caption
          %     Example table generated by Python
          %   }{% Label
          %     test
          %   }
          %   25 & 43 &       Lorem & iswdufvbouwesdbnvg \\
          %   82 & 71 &       ipsum &                abc \\
          %   23 & 52 &       dolor &            sdvcsdv \\
          %   82 & 85 &         sit &       sdvdssdvdvvn \\
          %   93 & 63 &        amet &          yumyumyum \\
          %   83 & 35 & consectetur &               wqoe \\
          %   87 & 51 &  adipiscing &            qphjpgh \\
          %   79 & 41 &        elit & owperjgpowegjwjggg \\
          %   84 & 88 &   Curabitur &        wepogjwpeog \\
          %   60 &  7 &         nec &                 oi \\
          % \end{doctor-table}
          % ---------------------------------------------------------------------------
          \small
          \rowcolors{3}{gray!5}{}
          \renewcommand{\arraystretch}{1.25}
          \xltabular{\linewidth}{#2}
          \rowcolor{white}\caption{#4}\label{table:#5} \\%
          \toprule%
          \rowcolor{white}#3%
          \specialrule{.05em}{.05em}{.05em}%
          \endfirsthead%
          
          \rowcolor{white}\caption[]{#4 (cont.)} \\%
          \rowcolor{white}\multicolumn{#1}{c}{
            \raisebox{.15em}{\resizebox{0.95\textwidth}{!}{
              \makebox[\textwidth]{\dashrule[black]}
            }}
          } \\%
          \rowcolor{white}#3%
          \specialrule{.05em}{.05em}{.05em}
          \endhead%
          
          \rowcolor{white}\multicolumn{#1}{r}{%
            \multirow{2}{*}{%
              \parbox{0.95\textwidth}{%
                \raisebox{.15em}{\resizebox{0.95\textwidth}{!}{
                  \makebox[\textwidth]{\dashrule[black]}
                }}
                \raggedleft\footnotesize\textit{Continued on next page}
              }
            }
          }
          \endfoot%
          
          \bottomrule%
          \endlastfoot%
        }{
          \endxltabular
        }
      """
    }
  }

  @property
  def get_tex_source(self, folder=options['document']['path']) -> None:
    for root, _, _ in os.walk(os.getcwd()):
      if folder in root:
        return root
        break

  def write_to(self, out_path: str) -> None:
    """
    Export LaTeX code to src folder destination.
    """
    destination = f"{self.get_tex_source}\\{out_path}.tex"
    with open(destination, "w") as f:
      f.write(self.get_result())
    print(f"Table saved to {self.get_tex_source}\\\033[1m\033[93m{out_path}.tex\033[0m.")

  def packages_loaded(self) -> bool:
    """
    Ensure all required packages are loaded.
    """
    if (
      string.startswith(("ftp://", "http://"))
      and 
      string.endswith((".jpg", ".png"))
    ):
      pass

    pkg_list = self.options["requirements"]["packages"].keys()
    
    pass

  def file_exists(self) -> bool:
    """
    Confirm if doctor .sty or .cls file exists.
    """
    pass

  def env_exists(self) -> bool:
    """
    Confirm if tabular or plotting TeX environments exists.
    """
    pass